const express = require('express'); // we import express again . because we're using express for our entire application . 
const router = express.Router() // we're going to get the router portion of that variable 



router.get('/',(req,res)=>{ // now with the router variable we just created we can actually create our (rout or root may be) so we can just say router.get this is going to be using a get action in order to get a rout here this is just going to be our  very route of our application this just going to be very rout of our application this is just going to be localhost :3000 or just like this . localhost:3000 or just like this . and in here we're just pass in a function and this function is going to take two parameters one is the actual request of the request and the next one is the respond that we're sending back .
// res.send('Hello World'); //so in here we're just going to for now send a basic default response so we just say res.send('And we're just going to send some texts that says hello world') just so that we know this is working and now as you see this is automatically refreshed by nodemon and if we refresh our application we'll se nothing actually happens . that's because we haven't actually hooked up our application yet to use this router our server doesn't know that this router exists . so we wanna import this router into our server . in order to do that we go to line 66 of server.js . then go to server.js and read from line 66 to line 67 . [ Note: if line 7 and line 8 exists at the same time then the output will be line 7 and if line 8 is commented out then the output will be line 8 . Explanation :  ]
res.render('index')  // after line 2 of index.ejs continued to here . we're going to  render our views and pass the name of the view which is index.ejs file . now if we refresh our page we'll see  even though our index.ejs only has the text middle on it we're getting the before middle and after that's because the layout files body section is importing everything from every single one of our pages in our application . This is going to make to build in our application much easier because if we need to change anything in our layout we only have to do in one file instead of having to do in every single one of our files in our applications. it also makes it sweet when we have to copy and paste the boiler plate html in layouts.ejs from DOCTYPE to </head> every single time we create a page. Then go to line 64(changed to 66 may be) of server.js . [ Note: if line 7 and line 8 exists at the same time then the output will be line 7 and if line 8 is commented out then the output will be line 8 . Explanation :  ] 
// when we run this you'll see that nothing will happen that's because we haven't actually hooked up our application yet to use this router 
// Our server doesn't know that this router exists so we're just going to import this router into our server
//  in order to do that we're just gonna come down to line 6 of server.js and require that file that we just created  so just call it our indexRouter and it's going to be equal to require('and requires going to take a relative path so you start it with ./ which says relative to where we are meaning relative to server.js because this line of code is in server.js and not in the index.js then where is this route? and it's inside of our routes folder and then with a / it's just our index route inside of this routes folder so it is ./routes/index)
})

module.exports = router  // so what we wanna do is we export this router that we just created inside of in this application , so just go in to this bottom here and we type in module.exports we wanna set that equal to our router now whenever we import this file inside of our applicatin such as in server js where we're requiring this in line 57 of server.js , this indexRouter variable in line 57(changed to maybe 66) of server.js is going to set to this router variable in line 2 of index.js 



// Now if we go to localhost:3000 we'll see the text inside line 7 

// now that we have our routes being hooked up with our actual server we can work on integrating our routes with our views . as we created here in our server.js we set up this layout file . Let's actually create that layout file for our application inside views . and inside of layouts folder we create a file called layouts.ejs . In order to have syntax hghlihting inside of an ejs file make sure you download the ejs language support extension in visual studio code if you are using visual studio code otherwise you will not have syntax highlighting inside of ejs file . Then we go to layouts.ejs file